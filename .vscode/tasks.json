{
  // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  // PROJECT NOVA DAWN - VS CODE TASKS
  // CreativeWorkzStudio LLC - Kingdom Technology Automation
  // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

  "version": "2.0.0",
  "tasks": [
    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    // KINGDOM TECHNOLOGY VALIDATION TASKS
    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

    {
      "label": "Kingdom Tech: File Size Check",
      "type": "shell",
      "command": "find data/ include/ src/ -name '*.md' -o -name '*.hpp' -o -name '*.cpp' | xargs wc -l | awk '$1 > 2000 {print \"‚ö†Ô∏è  THRESHOLD VIOLATION: \" $2 \" (\" $1 \" lines) - MUST modularize before merge!\"}; $1 > 1800 {print \"üü† ACTIVELY SPLITTING: \" $2 \" (\" $1 \" lines)\"}; $1 > 1500 {print \"üü° START PLANNING: \" $2 \" (\" $1 \" lines)\"}'",
      "problemMatcher": [],
      "group": {
        "kind": "test",
        "isDefault": false
      },
      "presentation": {
        "reveal": "always",
        "panel": "new",
        "clear": true
      }
    },

    {
      "label": "Kingdom Tech: Critical File Size Alert",
      "type": "shell",
      "command": "find data/ include/ src/ -name '*.md' -o -name '*.hpp' -o -name '*.cpp' | xargs wc -l | awk '$1 > 2000 {count++; print \"üî¥ CRITICAL: \" $2 \" (\" $1 \" lines)\"}; END {if (count > 0) {print \"\\n‚ùå \" count \" file(s) exceed 2000-line HARD LIMIT!\"; exit 1} else {print \"\\n‚úÖ All files within Kingdom Technology thresholds\"}}'",
      "problemMatcher": [],
      "group": {
        "kind": "test",
        "isDefault": false
      },
      "presentation": {
        "reveal": "always",
        "panel": "new",
        "clear": true
      }
    },

    {
      "label": "Kingdom Tech: Documentation Density Check",
      "type": "shell",
      "command": "echo 'üìä Checking Documentation-to-Code Ratio (Target: 5:1 for foundation files)'; for file in include/cpi-si/**/*.hpp; do if [ -f \"$file\" ]; then lines=$(wc -l < \"$file\"); comments=$(grep -cE '^[[:space:]]*(//|/\\*|\\*)' \"$file\" || echo 0); code=$((lines - comments)); if [ $code -gt 0 ]; then ratio=$(awk \"BEGIN {printf \\\"%.1f\\\", $comments/$code}\"); echo \"$file: ${ratio}:1 ($comments doc / $code code)\"; fi; fi; done",
      "problemMatcher": [],
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      }
    },

    {
      "label": "Markdown: Validate All Links",
      "type": "shell",
      "command": "find data/ include/ -name '*.md' -exec echo '\\nüìÑ Checking: {}' \\; -exec grep -n '](#' {} \\; || echo '‚úÖ Link check complete'",
      "problemMatcher": [],
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      }
    },

    {
      "label": "Markdown: Find Broken Image Links",
      "type": "shell",
      "command": "find data/ include/ -name '*.md' -print0 | xargs -0 grep -n '!\\[.*\\](.*\\.png\\|.*\\.jpg\\|.*\\.svg)' | while IFS=: read -r file line content; do img=$(echo \"$content\" | sed -n 's/.*](\\([^)]*\\)).*/\\1/p'); if [ ! -f \"$(dirname \"$file\")/$img\" ]; then echo \"‚ùå $file:$line - Missing: $img\"; fi; done || echo '‚úÖ All images found'",
      "problemMatcher": [],
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      }
    },

    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    // CMAKE BUILD TASKS (Future C++ Implementation)
    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

    {
      "label": "CMake: Configure (Debug)",
      "type": "shell",
      "command": "cmake",
      "args": [
        "-S",
        "${workspaceFolder}",
        "-B",
        "${workspaceFolder}/build",
        "-DCMAKE_BUILD_TYPE=Debug",
        "-DCMAKE_EXPORT_COMPILE_COMMANDS=ON"
      ],
      "group": {
        "kind": "build",
        "isDefault": false
      },
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "panel": "shared"
      }
    },

    {
      "label": "CMake: Configure (Release)",
      "type": "shell",
      "command": "cmake",
      "args": [
        "-S",
        "${workspaceFolder}",
        "-B",
        "${workspaceFolder}/build",
        "-DCMAKE_BUILD_TYPE=Release",
        "-DCMAKE_EXPORT_COMPILE_COMMANDS=ON"
      ],
      "group": "build",
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "panel": "shared"
      }
    },

    {
      "label": "CMake: Build All",
      "type": "shell",
      "command": "cmake",
      "args": [
        "--build",
        "${workspaceFolder}/build",
        "-j",
        "$(nproc)"
      ],
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "dependsOn": ["CMake: Configure (Debug)"],
      "problemMatcher": "$gcc",
      "presentation": {
        "reveal": "always",
        "panel": "shared"
      }
    },

    {
      "label": "CMake: Clean Build",
      "type": "shell",
      "command": "rm -rf ${workspaceFolder}/build && cmake -S ${workspaceFolder} -B ${workspaceFolder}/build -DCMAKE_BUILD_TYPE=Debug && cmake --build ${workspaceFolder}/build -j $(nproc)",
      "group": "build",
      "problemMatcher": "$gcc",
      "presentation": {
        "reveal": "always",
        "panel": "shared"
      }
    },

    {
      "label": "CMake: Run Tests",
      "type": "shell",
      "command": "cd ${workspaceFolder}/build && ctest --output-on-failure",
      "group": {
        "kind": "test",
        "isDefault": true
      },
      "dependsOn": ["CMake: Build All"],
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "panel": "dedicated"
      }
    },

    {
      "label": "CMake: Run Tests (Verbose)",
      "type": "shell",
      "command": "cd ${workspaceFolder}/build && ctest -V",
      "group": "test",
      "dependsOn": ["CMake: Build All"],
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "panel": "dedicated"
      }
    },

    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    // C++ CODE QUALITY TASKS
    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

    {
      "label": "C++: Format All Files",
      "type": "shell",
      "command": "find include/ src/ -name '*.hpp' -o -name '*.cpp' -o -name '*.h' | xargs clang-format -i --style=Google",
      "problemMatcher": [],
      "group": "none",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      }
    },

    {
      "label": "C++: Static Analysis (clang-tidy)",
      "type": "shell",
      "command": "clang-tidy src/**/*.cpp -- -std=c++17 -I${workspaceFolder}/include",
      "problemMatcher": [],
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      }
    },

    {
      "label": "C++: Generate Documentation (Doxygen)",
      "type": "shell",
      "command": "doxygen Doxyfile",
      "problemMatcher": [],
      "group": "none",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      }
    },

    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    // GIT WORKFLOW TASKS
    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

    {
      "label": "Git: Status & Diff Summary",
      "type": "shell",
      "command": "echo 'üìä Git Status:' && git status && echo '\\nüìù Staged Changes:' && git diff --cached --stat && echo '\\nüîÑ Unstaged Changes:' && git diff --stat",
      "problemMatcher": [],
      "group": "none",
      "presentation": {
        "reveal": "always",
        "panel": "new",
        "clear": true
      }
    },

    {
      "label": "Git: Pre-Commit Checks",
      "type": "shell",
      "command": "echo 'üîç Running pre-commit checks...' && echo '\\n1Ô∏è‚É£ File Size Check:' && find data/ include/ src/ -name '*.md' -o -name '*.hpp' -o -name '*.cpp' | xargs wc -l | awk '$1 > 2000 {count++; print \"‚ùå \" $2 \" (\" $1 \" lines)\"} END {if (count > 0) {print \"\\n‚ö†Ô∏è  \" count \" file(s) exceed threshold!\"; exit 1} else print \"\\n‚úÖ File sizes OK\"}' && echo '\\n2Ô∏è‚É£ Git Status:' && git status --short",
      "problemMatcher": [],
      "group": "none",
      "presentation": {
        "reveal": "always",
        "panel": "new",
        "clear": true
      }
    },

    {
      "label": "Git: Commit Message Style Check",
      "type": "shell",
      "command": "git log -1 --pretty=%B | head -1 | awk 'length($0) > 72 {print \"‚ö†Ô∏è  Commit subject exceeds 72 characters: \" length($0)} length($0) <= 72 {print \"‚úÖ Commit subject length OK: \" length($0)}'",
      "problemMatcher": [],
      "group": "none",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      }
    },

    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    // PROJECT UTILITIES
    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

    {
      "label": "Project: Count Total Documentation Lines",
      "type": "shell",
      "command": "echo 'üìä Project Nova Dawn - Documentation Metrics' && echo '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ' && echo '\\nüìö Markdown Documentation:' && find data/ -name '*.md' ! -path '*/timeline/*' | xargs wc -l | tail -1 && echo '\\nüìñ Code Documentation:' && find include/ src/ -name '*.hpp' -o -name '*.cpp' | xargs wc -l | tail -1 && echo '\\nüèóÔ∏è  Total Lines:' && find data/ include/ src/ -name '*.md' -o -name '*.hpp' -o -name '*.cpp' | xargs wc -l | tail -1",
      "problemMatcher": [],
      "group": "none",
      "presentation": {
        "reveal": "always",
        "panel": "new",
        "clear": true
      }
    },

    {
      "label": "Project: Find TODO Comments",
      "type": "shell",
      "command": "grep -rn 'TODO\\|FIXME\\|XXX\\|HACK\\|NOTE' --include='*.cpp' --include='*.hpp' --include='*.md' include/ src/ data/ || echo '‚úÖ No TODO comments found'",
      "problemMatcher": [],
      "group": "none",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      }
    },

    {
      "label": "Project: List Recent Backups",
      "type": "shell",
      "command": "ls -lhtr backups-for-critical-files/ | tail -10",
      "problemMatcher": [],
      "group": "none",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      }
    },

    {
      "label": "Project: Documentation Structure Overview",
      "type": "shell",
      "command": "echo 'üìÇ Project Nova Dawn - Structure Overview' && echo '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ' && tree -L 2 -d data/ && echo '\\nüîß Implementation Structure:' && tree -L 2 -d include/ src/",
      "problemMatcher": [],
      "group": "none",
      "presentation": {
        "reveal": "always",
        "panel": "new",
        "clear": true
      }
    }
  ]
}
